using NUnit.Framework;
using System.IO;
using System.Xml.Linq;
using Xamarin.Android.Lite.Tasks;

namespace Xamarin.Android.Lite.Tests
{
	[TestFixture]
	public class AndroidManifestWriterTests
	{
		Stream binaryManifest, textManifest;

		[SetUp]
		public void SetUp ()
		{
			var path = Path.Combine (Path.GetDirectoryName (GetType ().Assembly.Location), "Data");
			textManifest = File.OpenRead (Path.Combine (path, "AndroidManifest.xml"));
			binaryManifest = File.OpenRead (Path.Combine (path, "AndroidManifest.xml.bin"));
		}

		[TearDown]
		public void TearDown ()
		{
			textManifest.Dispose ();
			binaryManifest.Dispose ();
		}

		/// <summary>
		/// NOTE: these values are generated by aapt, so we have to "fixup" the manifest a bit to match the binary one
		/// </summary>
		string LoadText ()
		{
			var ns = XNamespace.Get ("http://schemas.android.com/apk/res/android");
			var xml = XElement.Load (textManifest);
			xml.SetAttributeValue ("platformBuildVersionCode", "27");
			xml.SetAttributeValue ("platformBuildVersionName", "8.1.0");

			//HACK: replace string resource names with integers
			const int mipmap_icon     = 2130903040; // @mipmap/icon
			const int style_MainTheme = 2131493263; // @style/MainTheme

			var application = xml.Element ("application");
			application.SetAttributeValue (ns + "icon", mipmap_icon);

			var activity = application.Element ("activity");
			activity.SetAttributeValue (ns + "theme", style_MainTheme);
			activity.SetAttributeValue (ns + "icon", mipmap_icon);
			activity.SetAttributeValue (ns + "configChanges", 1152); //orientation|screenSize

			return xml.ToString ();
		}

		[Test]
		public void ReadManifest ()
		{
			var doc = AndroidManifest.Create (binaryManifest);
			var xmlFromBinary = doc.Document.ToString ();
			var xmlFromText = LoadText ();

			Assert.AreEqual (xmlFromText, xmlFromBinary);
		}
	}
}
